"""
1) Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод
__init__() ), который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде
прямоугольной схемы.
Примеры матриц: 3 на 2, 3 на 3, 2 на 4.

31 22 | 3  5 32 | 3 5 8 3
37 43 | 2  4  6 | 8 3 7 1
51 86 |-1 64 -8 |

Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в
привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух
объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой
строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

"""

import copy


class Matrix:
    def __init__(self, data):
        self.data = data

    def __str__(self):
        s = ""
        for j in self.data:
            for i in j:
                s += str(i) + " "
            s += "\n"
        return s

    def __add__(self, other):
        if len(self.data) == len(other.data):
            if len(self.data[0]) == len(other.data[0]):
                __m = copy.deepcopy(self)
                for j in range(len(self.data)):
                    for i in range(len(self.data[j])):
                        __m.data[j][i] += other.data[j][i]
                return __m
        return


m = Matrix([[1, 2], [3, 4]])
print(f'm\n{m}')

n = Matrix([[1, 2, 3], [4, 5, 6]])
print(f'n\n{n}')

o = Matrix([[1, 1, 1], [1, 1, 1]])
print(f'o\n{o}')

p = n + o
print(f'p=n+o\n{p}')
print(f'n\n{n}')
print(f'o\n{o}')

q = n + m
print(f'q=n+m\n{q}')
